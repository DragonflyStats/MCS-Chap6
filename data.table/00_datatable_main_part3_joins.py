# -*- coding: utf-8 -*-
"""00-DataTable-MAIN-Part3-Joins.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IQUqgFpVn6GK9ERdk91C09_t8dEQIdKJ
"""

library(data.table)
library(magrittr)
library(ggplot2)

"""$${DT[i, j, by = x]}$$

``DT[where, select | update, group-by] [having] [order by]``


* SQL-like syntax
* Probably most powerful feature
*  $i$ is row-select, $j$ is row-output
* `by =' allows for grouping

## Merging / Joins

* The merging in data.table is very similar to base R ``merge()`` function. 
* The only difference is ``data.table`` by default takes common key variable as a primary key to merge two datasets. 
* On the other hand ``data.frame`` takes common variable name as a primary key to merge the datasets.

1. Inner Join
2. Left Join
3. Right Join
4. Full Join

### Sample Data
"""

(dt1 <- data.table(A = letters[rep(1:3, 2)], X = 1:6, key = "A"))
(dt2 <- data.table(A = letters[rep(2:4, 2)], Z = 6:1, key = "A"))
print(cbind(dt1,dt2))

"""### Inner Join
It returns all the matching observations in both the datasets.
"""

merge(dt1, dt2, by="A")

"""### Left Join

It returns all observations&nbsp;from the left dataset and the matched observations&nbsp;from the right dataset.<br />

"""

merge(dt1, dt2, by="A", all.x = TRUE)

"""### Right Join

It returns all observations from the right dataset and the matched observations from the left dataset.
"""

merge(dt1, dt2, by="A", all.y = TRUE)

"""## Full Join

It return all rows when there is a match in one of the datasets.
"""

merge(dt1, dt2, all=TRUE)

"""### Merging Tables

Inspired by ``A[B]`` in base R (\texttt{A} matrix, \texttt{B} a 2-col matrix)

"""

X <- data.table(a=1:10,b=2*1:10);
Y <- data.table(a=3*(1:10),c=2^(1:10))

# Indexing (Set Keys)
setkey(X,a)
setkey(Y,a)

X[Y] %>% print

Y[X] %>% print

merge(X, Y) %>% print

X <- data.table(grp = c("a","a","b","b","b","c","c"), foo = 1:7, key = 'grp');
X

Y <- data.table(c("b","c"), bar = c(4,2))
Y

X[Y] %>% print

X[Y, sum(foo * bar)]

X[Y, list(val = sum(foo * bar))]

"""### Convert a data.table to data.frame

You can use <b>``setDF()``</b> function to accomplish this task.
"""

setDF(mydata)

"""
Similarly, you can use <b>``setDT()`` </b>function to convert data frame to data table.<br />
"""

set.seed(1234)
X = data.frame(A=sample(3, 10, TRUE),
               B=sample(letters[1:3], 10, TRUE))

setDT(X, key = "A")

"""## Other Useful Functions

### Reshape Data

* It includes several useful functions which makes data cleaning easy and smooth. 
* To reshape or transpose data, you can use <b>dcast.data.table() </b>and <b>melt.data.table()</b> functions. 
* These functions are sourced from reshape2 package and make them efficient. 
* It also add some new features in these functions.

### Rolling Joins
It supports rolling joins. They are commonly used for analyzing time series data. A very R packages supports these kind of joins.
"""